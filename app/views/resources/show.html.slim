javascript:
  columns_hash = #{resource.schema_hash.to_json.html_safe}
  adminium_column_options = #{resource.adminium_column_options.to_json.html_safe}

nav.navbar.navbar-default
  .container-fluid
    .navbar-header
      = navbar_toggle 'subnavbar'
      = link_to params[:table].humanize, resources_path(params[:table]), class: 'navbar-brand'
      .navbar-text= "#{resource.human_name} ##{params[:id]}"
    #subnavbar.collapse.navbar-collapse
      .btn-group
        - if user_can? 'create', params[:table]
          = icon_button_link new_resource_path(table:params[:table]), 'plus', 'Create a new row', class: 'create-action'
          = icon_button_link new_resource_path(table:params[:table], clone_id: params[:id]), 'copy', 'Clone'
        - if user_can? 'edit', params[:table]
          = icon_button_link edit_resource_path(resource.table, params[:id]), 'pencil', 'Edit', class: 'edit-action'
        - if user_can? 'destroy', params[:table]
          = icon_button_link resource_path(resource.table, params[:id], redirect: 'index'), 'trash', 'Destroy', method: :delete, data: {confirm: t('items.destroy_warning')}, class: 'destroy-action'
      .navbar-right= settings_button 'Show settings'

.row.item-attributes data-table=params[:table] data-item-id=params[:id]
  .col-md-7
    - [%i(string varchar_array hstore), %i(integer float decimal)].each do |types|
      - columns = item_attributes_type types, resource
      - if columns.present?
        table.table.table-condensed.layout-fixed
          - columns.each do |name|
            tr
              th.col-md-3 title=name
                i.column_settings.fa.fa-cog
                = resource.column_display_name name
              == display_attribute :td, @item, name, resource
  .col-md-5
    table.table.table-condensed
      - primary_keys_and_time_fields_for_show(resource).each do |name|
        tr
          th.col-md-3 title=name
            i.column_settings.fa.fa-cog
            = resource.column_display_name name
          == display_attribute :td, @item, name, resource
    - columns = item_attributes_type([:boolean, :blob], resource)
    - if columns.present?
      table.table.table-condensed
        - columns.each do |name|
          tr
            th.col-md-3 title=name
              i.column_settings.fa.fa-cog
              = resource.column_display_name name
            == display_attribute :td, @item, name, resource

    - if resource.associations[:belongs_to].any?
      table.table.table-condensed
        - resource.associations[:belongs_to].each do |name, assoc|
          tr
            th title="Belongs to" = assoc[:foreign_key].to_s.humanize
            - foreign_key_value = @item[assoc[:foreign_key]]
            - if foreign_key_value
              td= display_belongs_to @item, assoc[:foreign_key], foreign_key_value, resource
            - else
              td.nilclass null

    - if resource.associations[:has_many].any?
      table.table.table-condensed
        - resource.associations[:has_many].each do |name, assoc|
          - next unless user_can? :show, name
          tr
            - count, assoc_params = (resource.has_many_count @item, name), {assoc[:foreign_key] => @item[assoc[:primary_key]]}
            th.col-md-2= name.to_s.humanize
            td
              = link_to resources_path(name, where: assoc_params) do
                span.badge.badge-warning = count
            td
              = display_associated_items resource, @item, name
              - if count > 5
                '  
                = link_to "...", resources_path(name, where: assoc_params)
            td
              = link_to new_resource_path(name, attributes: assoc_params), class: 'btn btn-mini', rel: "tooltip", data: {placement: :left}, title: "Create a new associated #{name.to_s.singularize.humanize}" do
                i.fa.fa-plus

= render 'resources/panels/show_settings'
#column-settings.modal.fade data-remote-path=column_setting_path('{table}', column: '{column}', view: '{view}')
