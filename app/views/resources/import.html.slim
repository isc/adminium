javascript:
  columns_hash = #{resource.schema_hash.to_json.html_safe}
  adminium_column_options = #{resource.adminium_column_options.to_json.html_safe}
  primary_key = '#{resource.primary_key}'

nav.navbar.navbar-default
  .container-fluid
    .navbar-header
      = link_to params[:table].capitalize, resources_path(params[:table]), class: 'navbar-brand'
      .navbar-text Import
.panel.panel-default.importHeader
  .panel-heading
    h3.panel-title Step 1 of 3
  .panel-body
    .row
      .col-md-4
        #select-file.step
          .btn.btn-warning.btn-block Select a CSV file and preview
          p.help-block The first row of the CSV must contain the column names.
        #start-import.step.hidden
          = submit_tag "", class: "btn btn-primary btn-block", id: 'perform-import'
          p.help-block Just review your data and go on !
        #processing.step.hidden
          .progress
            .progress-bar.progress-bar-striped.active style="width: 100%;"
          p.help-block
        #import-success.step.hidden
          = link_to "See imported data", resources_path(params[:table], asearch: 'Last import', order: resource.primary_key), class: 'btn btn-block btn-success'
          p.help-block Your data has been successfully imported.
      .col-md-8.file-description
        p.file-info.hidden
          i.fa.fa-file>
          span.filename
          a.change< href="" Change file
        p.importable_rows.hidden
          i.fa.fa-list
          '
          span
        p.status

table.table-striped.table-bordered.table.items-list data-table=params[:table]
  thead
    tr
  tbody
input#import_file.hidden type="file" name="file"
.well.importHelp
  h2 How does importing work ?
  p
    'This import feature lets you easily insert many rows at a time and update existing records. Select a file just up here and it will be read locally on your browser for you to review it.
    br
    'When you are comfortable with the review, you can actually import the data.
  h3 File and formatting
  p
    'You must provide a CSV file containing a row header describing all the columns you want to update.
    'It either can be the original database column names or the displayed column names configured in Adminium.
    br
    'Empty cells will be considered as NULL values for every column type except for <i>string</i> and <i>text</i> columns where it will be considered as empty strings.
    br
    'Boolean cells will be treated as boolean if the value looks like <i>true</i> or <i>false</i>, or can be specific if you have provided a custom displayed value for this column.
  h3 <code>INSERT</code> or <code>UPDATE</code>
  p
    'If your CSV file contains the ID column (more precisely, the primary key column), we will perform an existence check on your table for the rows with a value for this column in order to try and determine your intention.
    br
    'If all of the rows of the primary keys are found in your table, an update will be performed on those rows. If none of them are found, an insert will be performed with the supplied primary keys.
    br
    'If no ID column is detected or if the ID cell of a row is blank, it will be considered as a new row to insert.
    br
    'A summary of how many rows will be inserted and updated will be displayed.
  h3 Transactional import
  p
    'Your import runs in a transaction, meaning if your import fails at some point because of an SQL error (constraint violation, invalid content), all the import will be rollbacked.
  h3 Magic Timestamps
  p
    'If your table contains a <code>created_at</code> or <code>updated_at</code> datetime column, records will be automatically updated according to the Ruby on Rails convention.
  h3 Limitations
  p
    'For now, you can import up to 1500 rows at a time.
    'We recommend you to be careful and review the data you wish to import as we do not perform every possible check and your import could fail at some point (uniqueness violation, not allowed null value, ...)
