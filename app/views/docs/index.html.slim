.row
  .col-md-3
    .well
      ul.nav.nav-list
        li.nav-header Setup
        li
          a href="#installation" Add-on Install
          a href="#access" Accessing Adminium Interface
        li#features.nav-header Features
        li.divider
        li.nav-header FAQ
        li
          a href="#schema_search_path" How can I access PostgreSQL schemas other than public?
          a href="#plugin_comparison" How similar / different is Adminium from gems such as rails_admin or active_admin?
  .col-md-9
    h1 Documentation
    br
    section#installation.well
      h3 Add-on Install
      p In order to provide you with an administration interface for your data, Adminium needs to be able to connect to your database.
      p Adminium will store an encrypted version of the <code>DATABASE_URL</code> of your application in the Adminium database. Removing the add-on from your application will delete that info from the Adminium database.

      p The easiest way to do that is by using our Heroku's OAuth integration which will be used to read the <code>DATABASE_URL</code> configuration variable of your app.
      p You can also configure your database URL manually.

      h4 Manual installation
      p== "Visit the #{link_to "adminium page", 'https://elements.heroku.com/addons/adminium', target: '_blank'} on Heroku's marketplace and select a plan and your project."
      h5 Find your Heroku Postgres database URL
      p Go to the resources page of your application and click on your Heroku Postgres database add-on.
      p= image_tag 'herokuresources-panel.png', class: 'img-thumbnail img-responsive'
      p
        'In the <code>Connection settings</code> section, use the <i class="fa fa-cog"></i> button to switch to
        i URL
        '  display and copy the connection string.
      p= image_tag 'herokupostgres-panel.png', width: '420px', class: 'img-thumbnail img-responsive'
      h4 Integration
      p
        'Adminium doesn’t need to integrate at a code-level and thus isn’t tied to a particular language. It can be used with any app hosted on Heroku, be it Ruby, Node.js, Clojure, Java, Python, or Scala, as long as it makes use of a PostgreSQL or MySQL database.

    - Account::TIPS.each do |tip|
      - tip_body = render partial: "/docs/tips/#{tip}"
      section.feature-description.well(id=tip)
        h3== @tip_title
        = tip_body

    section.well#schema_search_path
      h3 How can I access PostgreSQL schemas other than public?
      p In PostgreSQL, tables are searched by default in a schema named "public".
      p If you need to access tables in a different schema, you can customize the search path by specifying it in your database URL (Edit Account -> Database Connection pane) :
      pre postgresql://user:pass@host/database?search_path=my_custom_schema
      p You can also specify multiple schema names by separating them with a comma :
      pre postgresql://user:pass@host/database?search_path=my_custom_schema,public

    section.well#plugin_comparison
      h3 How similar / different is Adminium from gems such as rails_admin or active_admin?
      p It is similar in purpose to rails_admin and active_admin.
      p It is however different in how it operates and thus allows different things. Rails admin and active admin are gems to be used with a Rails 3 application whereas Adminium is an Heroku add-on which can be used with any Heroku application, no matter the Rails version, the framework or even the language.
      p It also differs in the way it is configured ; rails / active admin use DSLs and thus require to write code and deploy the application to modify the configuration of the admin, whereas all the configuration in Adminium is done via the interface independently of the lifecycle of the target application and also allowing non technical users to be in charge of it.
